name: Deploy Microservices
on:
  #
  # Deploy the microservice on push to any branch of this code repository.
  #
  push: 
    branches:
      - main

  #
  # Allows deployment to be invoked manually through the GitHub Actions user interface.
  #
  workflow_dispatch: 

jobs:

  deploy:
    runs-on: ubuntu-latest
    
    env:
      TF_VERSION: '1.0.0'

    steps:
      
      # Checks-out your repository under $GITHUB_WORKSPACE.
      - uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        env:
          Az_Login_Info: ${{secrets.AZ_CREDENTIALS}}
        with:
          creds: ${{ env.Az_Login_Info }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./scripts/terraform
        run: terraform init

      - name: Terraform Apply
        id: terraform
        working-directory: ./scripts/terraform
        run: terraform apply -auto-approve

      - name: Retrieve Registry Info from Terraform Outputs
        id: tf
        working-directory: ./scripts/terraform
        run: |
          echo "ACR_NAME=$(terraform output -raw acr_url)" >> $GITHUB_OUTPUT
          echo "ACR_UN=$(terraform output -raw acr_uname)" >> $GITHUB_OUTPUT
          echo "ACR_PW=$(terraform output -raw acr_pass)" >> $GITHUB_OUTPUT
          echo "AZURE_RG=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "AZURE_AKS=$(terraform output -raw aks_name)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Install docker-compose
        uses: KengoTODA/actions-setup-docker-compose@v1
        with:
          version: '2.14.2'

      - name: Set Execute Permission for Scripts
        run: chmod +x ./scripts/build-image.sh

      - name: Build
        run: ./scripts/build-image.sh

      - name: Set Execute Permission for Scripts
        run: chmod +x ./scripts/push-image.sh

      - name: Publish
        env:
          CONTAINER_REGISTRY: ${{steps.tf.outputs.ACR_NAME}}
          REGISTRY_UN: ${{steps.tf.outputs.ACR_UN}}
          REGISTRY_PW: ${{steps.tf.outputs.ACR_PW}}
        run: ./scripts/push-image.sh

      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
          kubectl-version: v1.30.3
    
      - name: Deploy
        env:
          AZURE_RG: ${{steps.tf.outputs.AZURE_RG}}
          AZURE_AKS: ${{steps.tf.outputs.AZURE_AKS}}
        run: ./scripts/deploy.sh
      # #
      # # Builds the Docker image.
      # #
      # - name: Build
      #   run: ./scripts/build-image.sh

      # #
      # # Publishes the Docker image to the container registry.
      # #
      # - name: Publish
      #   run: ./scripts/push-image.sh

      # #
      # # Installs Kubectl and connects it to the cluster.
      # #
      # # https://github.com/marketplace/actions/kubernetes-cli-kubectl
      # #
      # - uses: tale/kubectl-action@v1
      #   with:
      #     base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      #     kubectl-version: v1.30.3
      
      # #
      # # Expands the configuration template and deploys the microservice.
      # #
      # - name: Deploy
      #   run: ./scripts/deploy.sh
